% this script reads all the spike timestamp and a/d info from a plx file into matlab
% variables.

% Open a plx file
% this will bring up the file-open dialog
StartingFileName = 'D:\PlexonData\code\0.997,-3.658,6.211 FS-sorted-01.pl2';
[OpenedFileName, Version, Freq, Comment, Trodalness, NPW, PreThresh, SpikePeakV, SpikeADResBits, SlowPeakV, SlowADResBits, Duration, DateTime] = plx_information(StartingFileName);

disp(['Opened File Name: ' OpenedFileName]);
disp(['Version: ' num2str(Version)]);
disp(['Frequency : ' num2str(Freq)]);
disp(['Comment : ' Comment]);
disp(['Date/Time : ' DateTime]);
disp(['Duration (s) : ' num2str(Duration)]);
disp(['Num Pts Per Wave : ' num2str(NPW)]);
disp(['Num Pts Pre-Threshold : ' num2str(PreThresh)]);

   

% get some counts
[tscounts, wfcounts, evcounts, slowcounts] = plx_info(OpenedFileName,1);

% tscounts, wfcounts are indexed by (unit+1,channel+1)
% tscounts(:,ch+1) is the per-unit counts for channel ch
% sum( tscounts(:,ch+1) ) is the total wfs for channel ch (all units)
% [nunits, nchannels] = size( tscounts )
% To get number of nonzero units/channels, use nnz() function

% gives actual number of units (including unsorted) and actual number of
% channels plus 1
[nunits1, nchannels1] = size( tscounts );   

% we will read in the timestamps of all units,channels into a two-dim cell
% array named allts, with each cell containing the timestamps for a unit,channel.
% Note that allts second dim is indexed by the 1-based channel number.
% preallocate for speed
allts = cell(nunits1, nchannels1);
firingRates = zeros(nunits1-1, nchannels1-1);
isiValues = cell(nunits1-1, nchannels1-1);

for iunit = 0:nunits1-1   % starting with unit 0 (unsorted) 
    for ich = 1:nchannels1-1
        if ( tscounts( iunit+1 , ich+1 ) > 0 )
            % get the timestamps for this channel and unit 
            [nts, allts{iunit+1,ich}] = plx_ts(OpenedFileName, ich , iunit );
         end
    end
end

% Calculate firing rate and ISI for each unit
for iunit = 0:nunits1-1
    for ich = 1:nchannels1-1
        if (tscounts(iunit+1, ich+1) > 0)
            timestamps = allts{iunit+1, ich};
            firingRate = numel(timestamps) / Duration; % Firing rate in spikes per second or Hz
            isi = diff(timestamps) / Freq; % ISI in seconds
        
        end
    end
end           



% and finally the events
[u,nevchannels] = size( evcounts );  
if ( nevchannels > 0 ) 
    % need the event chanmap to make any sense of these
    [u,evchans] = plx_event_chanmap(OpenedFileName);
	for iev = 1:nevchannels
		if ( evcounts(iev) > 0 )
            evch = evchans(iev);
            if ( evch == 257 )
				[nevs{iev}, tsevs{iev}, svStrobed] = plx_event_ts(OpenedFileName, evch); 
			else
				[nevs{iev}, tsevs{iev}, svdummy] = plx_event_ts(OpenedFileName, evch);
            end
		end
	end
end
[nev,evnames] = plx_event_names(OpenedFileName);


